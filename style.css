@import url('https://fonts.googleapis.com/css2?family=Baloo+Tamma+2:wght@500&display=swap');

body {
  display: flex;
  /* The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning. */
  /* To start using the Flexbox model, you need to first define a flex container. */
  /* The flex container becomes flexible by setting the display property to flex: */

  flex-direction: column;
  /* The flex-direction property defines in which direction the container wants to stack the flex items. */
  /* The column value stacks the flex items vertically (from top to bottom): */

  justify-content: center;
  /* The justify-content property is used to align the flex items */

  align-items: center;
  /* The align-items property is used to align the flex items. */
  /* The center value aligns the flex items in the middle of the container: */

  height: 100vh;
  /* Viewport Height (vh). This unit is based on the height of the viewport. A value of 1vh is equal to 1% of the viewport height. */

  width: 100vw;
  /* Viewport Width (vw). This unit is based on the width of the viewport. A value of 1vw is equal to 1% of the viewport width. */
  /* If the viewport is 1200px wide and 1000px high, the value of 10vw will be 120px and the value of 10vh will be 100px.  */

  background: #d9dde2;
}
h1 {
  font-family: 'Baloo Tamma 2', cursive;
  position: relative;
  /* The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky). */
  /* An element with position: relative; is positioned relative to its normal position. */
  text-align: center;
  color: #353535;
  bottom: 30px;
  /* The bottom property affects the vertical position of a positioned element. This property has no effect on non-positioned elements. */
  /* If position: relative; - the bottom property makes the element's bottom edge to move above/below its normal position. */
}
h1::before {
  /* The ::before selector inserts something before the content of each selected element(s). */
  position: absolute;
  /* An element with position: absolute; is positioned relative to the nearest positioned ancestor  */
  content: '';
  /* The content property is used with the ::before and ::after pseudo-elements, to insert generated content. */
  bottom: -10px;
  /* The bottom property affects the vertical position of a positioned element. This property has no effect on non-positioned elements. */
  /* If position: absolute; or position: fixed; - the bottom property sets the bottom edge of an element to a unit above/below the bottom edge of its nearest positioned ancestor. */
  width: 100%;
  height: 2px;
  background-color: orange;
}
.container {
  display: flex;
  /* The flex container becomes flexible by setting the display property to flex: */
  flex-direction: row;
  justify-content: space-around;
  /* Display the flex items with space before, between, and after the lines */
  align-items: center;
  height: 80px;
  width: 350px;
  position: relative;
  box-shadow: -7px -7px 20px 0px #fff9, -4px -4px 5px 0px #fff9,
    7px 7px 20px 0px #0002, 4px 4px 5px 0px #0001, inset 0px 0px 0px 0px #fff9,
    inset 0px 0px 0px 0px #0001, inset 0px 0px 0px 0px #fff9,
    inset 0px 0px 0px 0px #0001;
  /* To attach more than one shadow to an element, add a comma-separated list of shadows */
  /* box-shadow: h-offset v-offset blur spread color  */

  /*
    h-offset-->	Required. The horizontal offset of the shadow. A positive value puts the shadow on the right side of the box, a negative value puts the shadow on the left side of the box	

    v-offset-->	Required. The vertical offset of the shadow. A positive value puts the shadow below the box, a negative value puts the shadow above the box	

    blur-->	Optional. The blur radius. The higher the number, the more blurred the shadow will be	
    spread	Optional. The spread radius. A positive value increases the size of the shadow, a negative value decreases the size of the shadow	

    color->	Optional. The color of the shadow. The default value is the text color.
    
    inset-->	Optional. Changes the shadow from an outer shadow (outset) to an inner shadow
    */

  transition: box-shadow 0.6s cubic-bezier(0.79, 0.21, 0.06, 0.81);
  /* CSS transitions allows you to change property values smoothly, over a given duration. */
  /* To create a transition effect, you must specify two things:

     1. the CSS property you want to add an effect to
     2.  the duration of the effect
      Note: If the duration part is not specified, the transition will have no effect, because the default value is 0. */

  /* The cubic-bezier() function defines a Cubic Bezier curve.
  A Cubic Bezier curve is defined by four points P0, P1, P2, and P3. P0 and P3 are the start and the end of the curve and, in CSS these points are fixed as the coordinates are ratios.
  */
  border-radius: 10px;
}
.btn {
  height: 35px;
  width: 35px;
  border-radius: 3px;
  background: #e0e5ec;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  box-shadow: -7px -7px 20px 0px #fff9, -4px -4px 5px 0px #fff9,
    7px 7px 20px 0px #0002, 4px 4px 5px 0px #0001, inset 0px 0px 0px 0px #fff9,
    inset 0px 0px 0px 0px #0001, inset 0px 0px 0px 0px #fff9,
    inset 0px 0px 0px 0px #0001;
  transition: box-shadow 0.6s cubic-bezier(0.79, 0.21, 0.06, 0.81);
  font-size: 16px;
  color: rgba(42, 52, 84, 1);
  text-decoration: none;
  border-radius: 50%;
}
.btn:active {
  box-shadow: 4px 4px 6px 0 rgba(255, 255, 255, 0.5),
    -4px -4px 6px 0 rgba(116, 125, 136, 0.2),
    inset -4px -4px 6px 0 rgba(255, 255, 255, 0.5),
    inset 4px 4px 6px 0 rgba(116, 125, 136, 0.3);
}
